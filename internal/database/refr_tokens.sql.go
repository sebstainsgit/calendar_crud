// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refr_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefrToken = `-- name: CreateRefrToken :one
INSERT INTO refresh_tokens (refr_token, users_id, expires)
VALUES ($1, $2, $3)
RETURNING refr_token, users_id, expires
`

type CreateRefrTokenParams struct {
	RefrToken string
	UsersID   uuid.UUID
	Expires   time.Time
}

func (q *Queries) CreateRefrToken(ctx context.Context, arg CreateRefrTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefrToken, arg.RefrToken, arg.UsersID, arg.Expires)
	var i RefreshToken
	err := row.Scan(&i.RefrToken, &i.UsersID, &i.Expires)
	return i, err
}

const deleteRefrToken = `-- name: DeleteRefrToken :exec
DELETE FROM refresh_tokens
WHERE refr_token = $1
`

func (q *Queries) DeleteRefrToken(ctx context.Context, refrToken string) error {
	_, err := q.db.ExecContext(ctx, deleteRefrToken, refrToken)
	return err
}

const getAllRefrTokens = `-- name: GetAllRefrTokens :many
SELECT refr_token, users_id, expires FROM refresh_tokens
`

func (q *Queries) GetAllRefrTokens(ctx context.Context) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getAllRefrTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(&i.RefrToken, &i.UsersID, &i.Expires); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userIDFromRefrToken = `-- name: UserIDFromRefrToken :one
SELECT users_id FROM refresh_tokens
WHERE refr_token = $1
`

func (q *Queries) UserIDFromRefrToken(ctx context.Context, refrToken string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, userIDFromRefrToken, refrToken)
	var users_id uuid.UUID
	err := row.Scan(&users_id)
	return users_id, err
}
